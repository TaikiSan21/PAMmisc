% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getFittedMap.R
\name{getFittedMap}
\alias{getFittedMap}
\title{Get a Map Fitted to Data}
\usage{
getFittedMap(
  positions,
  source = "stamen",
  bounds = NULL,
  zoom = 14,
  force = FALSE,
  center = NULL,
  quiet = TRUE
)
}
\arguments{
\item{positions}{data frame containing columns \code{Latitude} and \code{Longitude}}

\item{source}{the source for the map. Can be either \code{google}, \code{stamen}, or
\code{offline}. \code{google} will load the smallest Google Map that fits the data.
\code{stamen} will load a 'toner-lite' style stamen map. Both \code{stamen} and
\code{offline} will load a map slightly larger than the range of the data. Google
Maps option requires setting up a Google API, please search ggmap help for more info.}

\item{bounds}{optional, the boundaries of a box that must be within the output plot.
Used to extend the plotted area, especially useful for the offline mode. Specified as
the lat / long coordinates of the lower left and upper right corners.}

\item{zoom}{zoom level used for the map. An integer, see zoom description in
get_map function of ggmap}

\item{force}{flag whether or not to force a specific zoom level instead of
finding it automatically}

\item{center}{the location to center the map on. If \code{NULL}, will use the
mean of the range of the data. If not \code{NULL} it must be a named vector
with values \code{lon} and \code{lat}}

\item{quiet}{\code{FALSE} to report zoom level used}
}
\value{
a ggmap object, fitted to the coordinates of the positions data
}
\description{
Return a ggmap object centered on the middle of the positions
   data. In online mode will download from Google Maps, will start zoomed
   in then gradually zoom out until all points fit unless force is TRUE. In
   offline mode will return a map just large enough to contain all the
   positions data.
}
\examples{

library(ggplot2)
data <- data.frame(Longitude = c(-117, -118), Latitude = c(32, 33.5))
\donttest{
# Online mode, gets smallest Google Map that fits data
map <- getFittedMap(data)
map
map + geom_point(data = data, aes(x = Longitude, y = Latitude))

# Offline mode, fits map closely to data
map <- getFittedMap(data, mode = 'offline')
map
map + geom_point(data = data, aes(x = Longitude, y = Latitude))

# Offline mode, expand bounds for nicer looking map
map <- getFittedMap(data, mode = 'offline', bounds = c(32, -120, 34, -117))
map
map + geom_point(data = data, aes(x = Longitude, y = Latitude))
}
}
\author{
Taiki Sakai \email{taiki.sakai@noaa.gov}
}
